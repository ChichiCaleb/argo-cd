// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: cmpserver/plugin/plugin.proto

package apiclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigManagementPluginService_GenerateManifest_FullMethodName          = "/plugin.ConfigManagementPluginService/GenerateManifest"
	ConfigManagementPluginService_CheckPluginConfiguration_FullMethodName  = "/plugin.ConfigManagementPluginService/CheckPluginConfiguration"
	ConfigManagementPluginService_MatchRepository_FullMethodName           = "/plugin.ConfigManagementPluginService/MatchRepository"
	ConfigManagementPluginService_GetParametersAnnouncement_FullMethodName = "/plugin.ConfigManagementPluginService/GetParametersAnnouncement"
)

// ConfigManagementPluginServiceClient is the client API for ConfigManagementPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfigManagementPlugin Service
type ConfigManagementPluginServiceClient interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, ManifestResponse], error)
	// CheckPluginConfiguration is a pre-flight request  to check the plugin configuration
	// without sending the whole repo.
	CheckPluginConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckPluginConfigurationResponse, error)
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, RepositoryResponse], error)
	// GetParametersAnnouncement gets a list of parameter announcements for the given app
	GetParametersAnnouncement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, ParametersAnnouncementResponse], error)
}

type configManagementPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigManagementPluginServiceClient(cc grpc.ClientConnInterface) ConfigManagementPluginServiceClient {
	return &configManagementPluginServiceClient{cc}
}

func (c *configManagementPluginServiceClient) GenerateManifest(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, ManifestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigManagementPluginService_ServiceDesc.Streams[0], ConfigManagementPluginService_GenerateManifest_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppStreamRequest, ManifestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_GenerateManifestClient = grpc.ClientStreamingClient[AppStreamRequest, ManifestResponse]

func (c *configManagementPluginServiceClient) CheckPluginConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckPluginConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPluginConfigurationResponse)
	err := c.cc.Invoke(ctx, ConfigManagementPluginService_CheckPluginConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configManagementPluginServiceClient) MatchRepository(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, RepositoryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigManagementPluginService_ServiceDesc.Streams[1], ConfigManagementPluginService_MatchRepository_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppStreamRequest, RepositoryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_MatchRepositoryClient = grpc.ClientStreamingClient[AppStreamRequest, RepositoryResponse]

func (c *configManagementPluginServiceClient) GetParametersAnnouncement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[AppStreamRequest, ParametersAnnouncementResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigManagementPluginService_ServiceDesc.Streams[2], ConfigManagementPluginService_GetParametersAnnouncement_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AppStreamRequest, ParametersAnnouncementResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_GetParametersAnnouncementClient = grpc.ClientStreamingClient[AppStreamRequest, ParametersAnnouncementResponse]

// ConfigManagementPluginServiceServer is the server API for ConfigManagementPluginService service.
// All implementations must embed UnimplementedConfigManagementPluginServiceServer
// for forward compatibility.
//
// ConfigManagementPlugin Service
type ConfigManagementPluginServiceServer interface {
	// GenerateManifests receive a stream containing a tgz archive with all required files necessary
	// to generate manifests
	GenerateManifest(grpc.ClientStreamingServer[AppStreamRequest, ManifestResponse]) error
	// CheckPluginConfiguration is a pre-flight request  to check the plugin configuration
	// without sending the whole repo.
	CheckPluginConfiguration(context.Context, *emptypb.Empty) (*CheckPluginConfigurationResponse, error)
	// MatchRepository returns whether or not the given application is supported by the plugin
	MatchRepository(grpc.ClientStreamingServer[AppStreamRequest, RepositoryResponse]) error
	// GetParametersAnnouncement gets a list of parameter announcements for the given app
	GetParametersAnnouncement(grpc.ClientStreamingServer[AppStreamRequest, ParametersAnnouncementResponse]) error
	mustEmbedUnimplementedConfigManagementPluginServiceServer()
}

// UnimplementedConfigManagementPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigManagementPluginServiceServer struct{}

func (UnimplementedConfigManagementPluginServiceServer) GenerateManifest(grpc.ClientStreamingServer[AppStreamRequest, ManifestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateManifest not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) CheckPluginConfiguration(context.Context, *emptypb.Empty) (*CheckPluginConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPluginConfiguration not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) MatchRepository(grpc.ClientStreamingServer[AppStreamRequest, RepositoryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MatchRepository not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) GetParametersAnnouncement(grpc.ClientStreamingServer[AppStreamRequest, ParametersAnnouncementResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetParametersAnnouncement not implemented")
}
func (UnimplementedConfigManagementPluginServiceServer) mustEmbedUnimplementedConfigManagementPluginServiceServer() {
}
func (UnimplementedConfigManagementPluginServiceServer) testEmbeddedByValue() {}

// UnsafeConfigManagementPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigManagementPluginServiceServer will
// result in compilation errors.
type UnsafeConfigManagementPluginServiceServer interface {
	mustEmbedUnimplementedConfigManagementPluginServiceServer()
}

func RegisterConfigManagementPluginServiceServer(s grpc.ServiceRegistrar, srv ConfigManagementPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigManagementPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigManagementPluginService_ServiceDesc, srv)
}

func _ConfigManagementPluginService_GenerateManifest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).GenerateManifest(&grpc.GenericServerStream[AppStreamRequest, ManifestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_GenerateManifestServer = grpc.ClientStreamingServer[AppStreamRequest, ManifestResponse]

func _ConfigManagementPluginService_CheckPluginConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigManagementPluginServiceServer).CheckPluginConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigManagementPluginService_CheckPluginConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigManagementPluginServiceServer).CheckPluginConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigManagementPluginService_MatchRepository_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).MatchRepository(&grpc.GenericServerStream[AppStreamRequest, RepositoryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_MatchRepositoryServer = grpc.ClientStreamingServer[AppStreamRequest, RepositoryResponse]

func _ConfigManagementPluginService_GetParametersAnnouncement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConfigManagementPluginServiceServer).GetParametersAnnouncement(&grpc.GenericServerStream[AppStreamRequest, ParametersAnnouncementResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigManagementPluginService_GetParametersAnnouncementServer = grpc.ClientStreamingServer[AppStreamRequest, ParametersAnnouncementResponse]

// ConfigManagementPluginService_ServiceDesc is the grpc.ServiceDesc for ConfigManagementPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigManagementPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.ConfigManagementPluginService",
	HandlerType: (*ConfigManagementPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPluginConfiguration",
			Handler:    _ConfigManagementPluginService_CheckPluginConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateManifest",
			Handler:       _ConfigManagementPluginService_GenerateManifest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MatchRepository",
			Handler:       _ConfigManagementPluginService_MatchRepository_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetParametersAnnouncement",
			Handler:       _ConfigManagementPluginService_GetParametersAnnouncement_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cmpserver/plugin/plugin.proto",
}
