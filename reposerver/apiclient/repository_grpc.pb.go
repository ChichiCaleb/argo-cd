// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: reposerver/repository/repository.proto

package apiclient

import (
	context "context"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepoServerService_GenerateManifest_FullMethodName          = "/repository.RepoServerService/GenerateManifest"
	RepoServerService_GenerateManifestWithFiles_FullMethodName = "/repository.RepoServerService/GenerateManifestWithFiles"
	RepoServerService_TestRepository_FullMethodName            = "/repository.RepoServerService/TestRepository"
	RepoServerService_ResolveRevision_FullMethodName           = "/repository.RepoServerService/ResolveRevision"
	RepoServerService_ListRefs_FullMethodName                  = "/repository.RepoServerService/ListRefs"
	RepoServerService_ListApps_FullMethodName                  = "/repository.RepoServerService/ListApps"
	RepoServerService_ListPlugins_FullMethodName               = "/repository.RepoServerService/ListPlugins"
	RepoServerService_GetAppDetails_FullMethodName             = "/repository.RepoServerService/GetAppDetails"
	RepoServerService_GetRevisionMetadata_FullMethodName       = "/repository.RepoServerService/GetRevisionMetadata"
	RepoServerService_GetRevisionChartDetails_FullMethodName   = "/repository.RepoServerService/GetRevisionChartDetails"
	RepoServerService_GetHelmCharts_FullMethodName             = "/repository.RepoServerService/GetHelmCharts"
	RepoServerService_GetGitFiles_FullMethodName               = "/repository.RepoServerService/GetGitFiles"
	RepoServerService_GetGitDirectories_FullMethodName         = "/repository.RepoServerService/GetGitDirectories"
	RepoServerService_UpdateRevisionForPaths_FullMethodName    = "/repository.RepoServerService/UpdateRevisionForPaths"
)

// RepoServerServiceClient is the client API for RepoServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ManifestService
type RepoServerServiceClient interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
	// GenerateManifestWithFiles generates manifest for application using provided tarball of files
	GenerateManifestWithFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ManifestRequestWithFiles, ManifestResponse], error)
	// Returns a bool val if the repository is valid and has proper access
	TestRepository(ctx context.Context, in *TestRepositoryRequest, opts ...grpc.CallOption) (*TestRepositoryResponse, error)
	// Returns a valid revision
	ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error)
	// Returns a list of refs (e.g. branches and tags) in the repo
	ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (*Refs, error)
	// ListApps returns a list of apps in the repo
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*AppList, error)
	// ListPlugins returns a list of cmp v2 plugins running as sidecar to reposerver
	ListPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginList, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error)
	// Get the meta-data (author, date, tags, message) for a specific revision of the repo
	GetRevisionMetadata(ctx context.Context, in *RepoServerRevisionMetadataRequest, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error)
	// Get the chart details (author, date, tags, message) for a specific revision of the repo
	GetRevisionChartDetails(ctx context.Context, in *RepoServerRevisionChartDetailsRequest, opts ...grpc.CallOption) (*v1alpha1.ChartDetails, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(ctx context.Context, in *HelmChartsRequest, opts ...grpc.CallOption) (*HelmChartsResponse, error)
	// GetGitFiles returns a set of file paths and their contents for the given repo
	GetGitFiles(ctx context.Context, in *GitFilesRequest, opts ...grpc.CallOption) (*GitFilesResponse, error)
	// GetGitDirectories returns a set of directory paths for the given repo
	GetGitDirectories(ctx context.Context, in *GitDirectoriesRequest, opts ...grpc.CallOption) (*GitDirectoriesResponse, error)
	// UpdateRevisionForPaths will compare two revisions and update the cache with the new revision if no changes are detected in the provided paths
	UpdateRevisionForPaths(ctx context.Context, in *UpdateRevisionForPathsRequest, opts ...grpc.CallOption) (*UpdateRevisionForPathsResponse, error)
}

type repoServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServerServiceClient(cc grpc.ClientConnInterface) RepoServerServiceClient {
	return &repoServerServiceClient{cc}
}

func (c *repoServerServiceClient) GenerateManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, RepoServerService_GenerateManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GenerateManifestWithFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ManifestRequestWithFiles, ManifestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RepoServerService_ServiceDesc.Streams[0], RepoServerService_GenerateManifestWithFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ManifestRequestWithFiles, ManifestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoServerService_GenerateManifestWithFilesClient = grpc.ClientStreamingClient[ManifestRequestWithFiles, ManifestResponse]

func (c *repoServerServiceClient) TestRepository(ctx context.Context, in *TestRepositoryRequest, opts ...grpc.CallOption) (*TestRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestRepositoryResponse)
	err := c.cc.Invoke(ctx, RepoServerService_TestRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ResolveRevision(ctx context.Context, in *ResolveRevisionRequest, opts ...grpc.CallOption) (*ResolveRevisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveRevisionResponse)
	err := c.cc.Invoke(ctx, RepoServerService_ResolveRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListRefs(ctx context.Context, in *ListRefsRequest, opts ...grpc.CallOption) (*Refs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Refs)
	err := c.cc.Invoke(ctx, RepoServerService_ListRefs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*AppList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppList)
	err := c.cc.Invoke(ctx, RepoServerService_ListApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) ListPlugins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginList)
	err := c.cc.Invoke(ctx, RepoServerService_ListPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetAppDetails(ctx context.Context, in *RepoServerAppDetailsQuery, opts ...grpc.CallOption) (*RepoAppDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepoAppDetailsResponse)
	err := c.cc.Invoke(ctx, RepoServerService_GetAppDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetRevisionMetadata(ctx context.Context, in *RepoServerRevisionMetadataRequest, opts ...grpc.CallOption) (*v1alpha1.RevisionMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.RevisionMetadata)
	err := c.cc.Invoke(ctx, RepoServerService_GetRevisionMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetRevisionChartDetails(ctx context.Context, in *RepoServerRevisionChartDetailsRequest, opts ...grpc.CallOption) (*v1alpha1.ChartDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ChartDetails)
	err := c.cc.Invoke(ctx, RepoServerService_GetRevisionChartDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetHelmCharts(ctx context.Context, in *HelmChartsRequest, opts ...grpc.CallOption) (*HelmChartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelmChartsResponse)
	err := c.cc.Invoke(ctx, RepoServerService_GetHelmCharts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetGitFiles(ctx context.Context, in *GitFilesRequest, opts ...grpc.CallOption) (*GitFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GitFilesResponse)
	err := c.cc.Invoke(ctx, RepoServerService_GetGitFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) GetGitDirectories(ctx context.Context, in *GitDirectoriesRequest, opts ...grpc.CallOption) (*GitDirectoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GitDirectoriesResponse)
	err := c.cc.Invoke(ctx, RepoServerService_GetGitDirectories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServerServiceClient) UpdateRevisionForPaths(ctx context.Context, in *UpdateRevisionForPathsRequest, opts ...grpc.CallOption) (*UpdateRevisionForPathsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRevisionForPathsResponse)
	err := c.cc.Invoke(ctx, RepoServerService_UpdateRevisionForPaths_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServerServiceServer is the server API for RepoServerService service.
// All implementations must embed UnimplementedRepoServerServiceServer
// for forward compatibility.
//
// ManifestService
type RepoServerServiceServer interface {
	// GenerateManifest generates manifest for application in specified repo name and revision
	GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	// GenerateManifestWithFiles generates manifest for application using provided tarball of files
	GenerateManifestWithFiles(grpc.ClientStreamingServer[ManifestRequestWithFiles, ManifestResponse]) error
	// Returns a bool val if the repository is valid and has proper access
	TestRepository(context.Context, *TestRepositoryRequest) (*TestRepositoryResponse, error)
	// Returns a valid revision
	ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error)
	// Returns a list of refs (e.g. branches and tags) in the repo
	ListRefs(context.Context, *ListRefsRequest) (*Refs, error)
	// ListApps returns a list of apps in the repo
	ListApps(context.Context, *ListAppsRequest) (*AppList, error)
	// ListPlugins returns a list of cmp v2 plugins running as sidecar to reposerver
	ListPlugins(context.Context, *emptypb.Empty) (*PluginList, error)
	// Generate manifest for application in specified repo name and revision
	GetAppDetails(context.Context, *RepoServerAppDetailsQuery) (*RepoAppDetailsResponse, error)
	// Get the meta-data (author, date, tags, message) for a specific revision of the repo
	GetRevisionMetadata(context.Context, *RepoServerRevisionMetadataRequest) (*v1alpha1.RevisionMetadata, error)
	// Get the chart details (author, date, tags, message) for a specific revision of the repo
	GetRevisionChartDetails(context.Context, *RepoServerRevisionChartDetailsRequest) (*v1alpha1.ChartDetails, error)
	// GetHelmCharts returns list of helm charts in the specified repository
	GetHelmCharts(context.Context, *HelmChartsRequest) (*HelmChartsResponse, error)
	// GetGitFiles returns a set of file paths and their contents for the given repo
	GetGitFiles(context.Context, *GitFilesRequest) (*GitFilesResponse, error)
	// GetGitDirectories returns a set of directory paths for the given repo
	GetGitDirectories(context.Context, *GitDirectoriesRequest) (*GitDirectoriesResponse, error)
	// UpdateRevisionForPaths will compare two revisions and update the cache with the new revision if no changes are detected in the provided paths
	UpdateRevisionForPaths(context.Context, *UpdateRevisionForPathsRequest) (*UpdateRevisionForPathsResponse, error)
	mustEmbedUnimplementedRepoServerServiceServer()
}

// UnimplementedRepoServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepoServerServiceServer struct{}

func (UnimplementedRepoServerServiceServer) GenerateManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateManifest not implemented")
}
func (UnimplementedRepoServerServiceServer) GenerateManifestWithFiles(grpc.ClientStreamingServer[ManifestRequestWithFiles, ManifestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateManifestWithFiles not implemented")
}
func (UnimplementedRepoServerServiceServer) TestRepository(context.Context, *TestRepositoryRequest) (*TestRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRepository not implemented")
}
func (UnimplementedRepoServerServiceServer) ResolveRevision(context.Context, *ResolveRevisionRequest) (*ResolveRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveRevision not implemented")
}
func (UnimplementedRepoServerServiceServer) ListRefs(context.Context, *ListRefsRequest) (*Refs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRefs not implemented")
}
func (UnimplementedRepoServerServiceServer) ListApps(context.Context, *ListAppsRequest) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedRepoServerServiceServer) ListPlugins(context.Context, *emptypb.Empty) (*PluginList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedRepoServerServiceServer) GetAppDetails(context.Context, *RepoServerAppDetailsQuery) (*RepoAppDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetails not implemented")
}
func (UnimplementedRepoServerServiceServer) GetRevisionMetadata(context.Context, *RepoServerRevisionMetadataRequest) (*v1alpha1.RevisionMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevisionMetadata not implemented")
}
func (UnimplementedRepoServerServiceServer) GetRevisionChartDetails(context.Context, *RepoServerRevisionChartDetailsRequest) (*v1alpha1.ChartDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevisionChartDetails not implemented")
}
func (UnimplementedRepoServerServiceServer) GetHelmCharts(context.Context, *HelmChartsRequest) (*HelmChartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelmCharts not implemented")
}
func (UnimplementedRepoServerServiceServer) GetGitFiles(context.Context, *GitFilesRequest) (*GitFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitFiles not implemented")
}
func (UnimplementedRepoServerServiceServer) GetGitDirectories(context.Context, *GitDirectoriesRequest) (*GitDirectoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitDirectories not implemented")
}
func (UnimplementedRepoServerServiceServer) UpdateRevisionForPaths(context.Context, *UpdateRevisionForPathsRequest) (*UpdateRevisionForPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevisionForPaths not implemented")
}
func (UnimplementedRepoServerServiceServer) mustEmbedUnimplementedRepoServerServiceServer() {}
func (UnimplementedRepoServerServiceServer) testEmbeddedByValue()                           {}

// UnsafeRepoServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServerServiceServer will
// result in compilation errors.
type UnsafeRepoServerServiceServer interface {
	mustEmbedUnimplementedRepoServerServiceServer()
}

func RegisterRepoServerServiceServer(s grpc.ServiceRegistrar, srv RepoServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepoServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepoServerService_ServiceDesc, srv)
}

func _RepoServerService_GenerateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GenerateManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GenerateManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GenerateManifestWithFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepoServerServiceServer).GenerateManifestWithFiles(&grpc.GenericServerStream[ManifestRequestWithFiles, ManifestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RepoServerService_GenerateManifestWithFilesServer = grpc.ClientStreamingServer[ManifestRequestWithFiles, ManifestResponse]

func _RepoServerService_TestRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).TestRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_TestRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).TestRepository(ctx, req.(*TestRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ResolveRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ResolveRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_ResolveRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ResolveRevision(ctx, req.(*ResolveRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_ListRefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListRefs(ctx, req.(*ListRefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).ListPlugins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerAppDetailsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetAppDetails(ctx, req.(*RepoServerAppDetailsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetRevisionMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerRevisionMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetRevisionMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetRevisionMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetRevisionMetadata(ctx, req.(*RepoServerRevisionMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetRevisionChartDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoServerRevisionChartDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetRevisionChartDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetRevisionChartDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetRevisionChartDetails(ctx, req.(*RepoServerRevisionChartDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetHelmCharts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelmChartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetHelmCharts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetHelmCharts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetHelmCharts(ctx, req.(*HelmChartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetGitFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetGitFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetGitFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetGitFiles(ctx, req.(*GitFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_GetGitDirectories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitDirectoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).GetGitDirectories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_GetGitDirectories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).GetGitDirectories(ctx, req.(*GitDirectoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoServerService_UpdateRevisionForPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRevisionForPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServerServiceServer).UpdateRevisionForPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoServerService_UpdateRevisionForPaths_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServerServiceServer).UpdateRevisionForPaths(ctx, req.(*UpdateRevisionForPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoServerService_ServiceDesc is the grpc.ServiceDesc for RepoServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "repository.RepoServerService",
	HandlerType: (*RepoServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateManifest",
			Handler:    _RepoServerService_GenerateManifest_Handler,
		},
		{
			MethodName: "TestRepository",
			Handler:    _RepoServerService_TestRepository_Handler,
		},
		{
			MethodName: "ResolveRevision",
			Handler:    _RepoServerService_ResolveRevision_Handler,
		},
		{
			MethodName: "ListRefs",
			Handler:    _RepoServerService_ListRefs_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _RepoServerService_ListApps_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _RepoServerService_ListPlugins_Handler,
		},
		{
			MethodName: "GetAppDetails",
			Handler:    _RepoServerService_GetAppDetails_Handler,
		},
		{
			MethodName: "GetRevisionMetadata",
			Handler:    _RepoServerService_GetRevisionMetadata_Handler,
		},
		{
			MethodName: "GetRevisionChartDetails",
			Handler:    _RepoServerService_GetRevisionChartDetails_Handler,
		},
		{
			MethodName: "GetHelmCharts",
			Handler:    _RepoServerService_GetHelmCharts_Handler,
		},
		{
			MethodName: "GetGitFiles",
			Handler:    _RepoServerService_GetGitFiles_Handler,
		},
		{
			MethodName: "GetGitDirectories",
			Handler:    _RepoServerService_GetGitDirectories_Handler,
		},
		{
			MethodName: "UpdateRevisionForPaths",
			Handler:    _RepoServerService_UpdateRevisionForPaths_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateManifestWithFiles",
			Handler:       _RepoServerService_GenerateManifestWithFiles_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "reposerver/repository/repository.proto",
}
