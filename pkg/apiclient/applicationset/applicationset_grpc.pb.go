// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: server/applicationset/applicationset.proto

// ApplicationSet Service
//
// ApplicationSet Service API performs CRUD actions against applicationset resources

package applicationset

import (
	context "context"
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApplicationSetService_Get_FullMethodName          = "/applicationset.ApplicationSetService/Get"
	ApplicationSetService_Generate_FullMethodName     = "/applicationset.ApplicationSetService/Generate"
	ApplicationSetService_List_FullMethodName         = "/applicationset.ApplicationSetService/List"
	ApplicationSetService_Create_FullMethodName       = "/applicationset.ApplicationSetService/Create"
	ApplicationSetService_Delete_FullMethodName       = "/applicationset.ApplicationSetService/Delete"
	ApplicationSetService_ResourceTree_FullMethodName = "/applicationset.ApplicationSetService/ResourceTree"
)

// ApplicationSetServiceClient is the client API for ApplicationSetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ApplicationSetService
type ApplicationSetServiceClient interface {
	// Get returns an applicationset by name
	Get(ctx context.Context, in *ApplicationSetGetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// Generate generates
	// change endpoint to "/api/v1/applicationsets/generate" to avoid grpc v2 duplicate endpoint error
	Generate(ctx context.Context, in *ApplicationSetGenerateRequest, opts ...grpc.CallOption) (*ApplicationSetGenerateResponse, error)
	// List returns list of applicationset
	List(ctx context.Context, in *ApplicationSetListQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error)
	// Create creates an applicationset
	// change endpoint to "/api/v1/applicationsets/create" to avoid grpc v2 duplicate endpoint error
	Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error)
	// ResourceTree returns resource tree
	ResourceTree(ctx context.Context, in *ApplicationSetTreeQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetTree, error)
}

type applicationSetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationSetServiceClient(cc grpc.ClientConnInterface) ApplicationSetServiceClient {
	return &applicationSetServiceClient{cc}
}

func (c *applicationSetServiceClient) Get(ctx context.Context, in *ApplicationSetGetQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, ApplicationSetService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Generate(ctx context.Context, in *ApplicationSetGenerateRequest, opts ...grpc.CallOption) (*ApplicationSetGenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplicationSetGenerateResponse)
	err := c.cc.Invoke(ctx, ApplicationSetService_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) List(ctx context.Context, in *ApplicationSetListQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ApplicationSetList)
	err := c.cc.Invoke(ctx, ApplicationSetService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Create(ctx context.Context, in *ApplicationSetCreateRequest, opts ...grpc.CallOption) (*v1alpha1.ApplicationSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ApplicationSet)
	err := c.cc.Invoke(ctx, ApplicationSetService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) Delete(ctx context.Context, in *ApplicationSetDeleteRequest, opts ...grpc.CallOption) (*ApplicationSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplicationSetResponse)
	err := c.cc.Invoke(ctx, ApplicationSetService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSetServiceClient) ResourceTree(ctx context.Context, in *ApplicationSetTreeQuery, opts ...grpc.CallOption) (*v1alpha1.ApplicationSetTree, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ApplicationSetTree)
	err := c.cc.Invoke(ctx, ApplicationSetService_ResourceTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationSetServiceServer is the server API for ApplicationSetService service.
// All implementations must embed UnimplementedApplicationSetServiceServer
// for forward compatibility.
//
// ApplicationSetService
type ApplicationSetServiceServer interface {
	// Get returns an applicationset by name
	Get(context.Context, *ApplicationSetGetQuery) (*v1alpha1.ApplicationSet, error)
	// Generate generates
	// change endpoint to "/api/v1/applicationsets/generate" to avoid grpc v2 duplicate endpoint error
	Generate(context.Context, *ApplicationSetGenerateRequest) (*ApplicationSetGenerateResponse, error)
	// List returns list of applicationset
	List(context.Context, *ApplicationSetListQuery) (*v1alpha1.ApplicationSetList, error)
	// Create creates an applicationset
	// change endpoint to "/api/v1/applicationsets/create" to avoid grpc v2 duplicate endpoint error
	Create(context.Context, *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error)
	// Delete deletes an application set
	Delete(context.Context, *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error)
	// ResourceTree returns resource tree
	ResourceTree(context.Context, *ApplicationSetTreeQuery) (*v1alpha1.ApplicationSetTree, error)
	mustEmbedUnimplementedApplicationSetServiceServer()
}

// UnimplementedApplicationSetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApplicationSetServiceServer struct{}

func (UnimplementedApplicationSetServiceServer) Get(context.Context, *ApplicationSetGetQuery) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationSetServiceServer) Generate(context.Context, *ApplicationSetGenerateRequest) (*ApplicationSetGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedApplicationSetServiceServer) List(context.Context, *ApplicationSetListQuery) (*v1alpha1.ApplicationSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationSetServiceServer) Create(context.Context, *ApplicationSetCreateRequest) (*v1alpha1.ApplicationSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationSetServiceServer) Delete(context.Context, *ApplicationSetDeleteRequest) (*ApplicationSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationSetServiceServer) ResourceTree(context.Context, *ApplicationSetTreeQuery) (*v1alpha1.ApplicationSetTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceTree not implemented")
}
func (UnimplementedApplicationSetServiceServer) mustEmbedUnimplementedApplicationSetServiceServer() {}
func (UnimplementedApplicationSetServiceServer) testEmbeddedByValue()                               {}

// UnsafeApplicationSetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationSetServiceServer will
// result in compilation errors.
type UnsafeApplicationSetServiceServer interface {
	mustEmbedUnimplementedApplicationSetServiceServer()
}

func RegisterApplicationSetServiceServer(s grpc.ServiceRegistrar, srv ApplicationSetServiceServer) {
	// If the following call pancis, it indicates UnimplementedApplicationSetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApplicationSetService_ServiceDesc, srv)
}

func _ApplicationSetService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetGetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Get(ctx, req.(*ApplicationSetGetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Generate(ctx, req.(*ApplicationSetGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).List(ctx, req.(*ApplicationSetListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Create(ctx, req.(*ApplicationSetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).Delete(ctx, req.(*ApplicationSetDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSetService_ResourceTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSetTreeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSetServiceServer).ResourceTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSetService_ResourceTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSetServiceServer).ResourceTree(ctx, req.(*ApplicationSetTreeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationSetService_ServiceDesc is the grpc.ServiceDesc for ApplicationSetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationSetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applicationset.ApplicationSetService",
	HandlerType: (*ApplicationSetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApplicationSetService_Get_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _ApplicationSetService_Generate_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationSetService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApplicationSetService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationSetService_Delete_Handler,
		},
		{
			MethodName: "ResourceTree",
			Handler:    _ApplicationSetService_ResourceTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/applicationset/applicationset.proto",
}
