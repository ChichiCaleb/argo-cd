// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: server/gpgkey/gpgkey.proto

// GPG public key service
//
// GPG public key API performs CRUD actions against GnuPGPublicKey resources

package gpgkey

import (
	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message to query the server for configured GPG public keys
type GnuPGPublicKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GPG key ID to query for
	KeyID string `protobuf:"bytes,1,opt,name=keyID,proto3" json:"keyID,omitempty"`
}

func (x *GnuPGPublicKeyQuery) Reset() {
	*x = GnuPGPublicKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_gpgkey_gpgkey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnuPGPublicKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnuPGPublicKeyQuery) ProtoMessage() {}

func (x *GnuPGPublicKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_server_gpgkey_gpgkey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnuPGPublicKeyQuery.ProtoReflect.Descriptor instead.
func (*GnuPGPublicKeyQuery) Descriptor() ([]byte, []int) {
	return file_server_gpgkey_gpgkey_proto_rawDescGZIP(), []int{0}
}

func (x *GnuPGPublicKeyQuery) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

// Request to create one or more public keys on the server
type GnuPGPublicKeyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw key data of the GPG key(s) to create
	Publickey *v1alpha1.GnuPGPublicKey `protobuf:"bytes,1,opt,name=publickey,proto3" json:"publickey,omitempty"`
	// Whether to upsert already existing public keys
	Upsert bool `protobuf:"varint,2,opt,name=upsert,proto3" json:"upsert,omitempty"`
}

func (x *GnuPGPublicKeyCreateRequest) Reset() {
	*x = GnuPGPublicKeyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_gpgkey_gpgkey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnuPGPublicKeyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnuPGPublicKeyCreateRequest) ProtoMessage() {}

func (x *GnuPGPublicKeyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_gpgkey_gpgkey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnuPGPublicKeyCreateRequest.ProtoReflect.Descriptor instead.
func (*GnuPGPublicKeyCreateRequest) Descriptor() ([]byte, []int) {
	return file_server_gpgkey_gpgkey_proto_rawDescGZIP(), []int{1}
}

func (x *GnuPGPublicKeyCreateRequest) GetPublickey() *v1alpha1.GnuPGPublicKey {
	if x != nil {
		return x.Publickey
	}
	return nil
}

func (x *GnuPGPublicKeyCreateRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

// Response to a public key creation request
type GnuPGPublicKeyCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of GPG public keys that have been created
	Created *v1alpha1.GnuPGPublicKeyList `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// List of key IDs that haven been skipped because they already exist on the server
	Skipped []string `protobuf:"bytes,2,rep,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *GnuPGPublicKeyCreateResponse) Reset() {
	*x = GnuPGPublicKeyCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_gpgkey_gpgkey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnuPGPublicKeyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnuPGPublicKeyCreateResponse) ProtoMessage() {}

func (x *GnuPGPublicKeyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_gpgkey_gpgkey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnuPGPublicKeyCreateResponse.ProtoReflect.Descriptor instead.
func (*GnuPGPublicKeyCreateResponse) Descriptor() ([]byte, []int) {
	return file_server_gpgkey_gpgkey_proto_rawDescGZIP(), []int{2}
}

func (x *GnuPGPublicKeyCreateResponse) GetCreated() *v1alpha1.GnuPGPublicKeyList {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GnuPGPublicKeyCreateResponse) GetSkipped() []string {
	if x != nil {
		return x.Skipped
	}
	return nil
}

// Generic (empty) response for GPG public key CRUD requests
type GnuPGPublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GnuPGPublicKeyResponse) Reset() {
	*x = GnuPGPublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_gpgkey_gpgkey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GnuPGPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GnuPGPublicKeyResponse) ProtoMessage() {}

func (x *GnuPGPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_gpgkey_gpgkey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GnuPGPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*GnuPGPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_server_gpgkey_gpgkey_proto_rawDescGZIP(), []int{3}
}

var File_server_gpgkey_gpgkey_proto protoreflect.FileDescriptor

var file_server_gpgkey_gpgkey_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x2f,
	0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x70,
	0x67, 0x6b, 0x65, 0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x2d, 0x63, 0x64, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2b, 0x0a, 0x13, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x22, 0xa1, 0x01,
	0x0a, 0x1b, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x64, 0x2e, 0x76,
	0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63,
	0x64, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x6e, 0x75, 0x50,
	0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x8d, 0x04, 0x0a, 0x0d, 0x47, 0x50, 0x47, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x17, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x70,
	0x67, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e,
	0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x4c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a,
	0x2e, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x64, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x70, 0x67, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x7d, 0x12, 0x77, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x6e, 0x75,
	0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x70, 0x67, 0x6b, 0x65,
	0x79, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65,
	0x79, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x70, 0x67, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x5e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x67,
	0x70, 0x67, 0x6b, 0x65, 0x79, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x67, 0x70, 0x67, 0x6b,
	0x65, 0x79, 0x2e, 0x47, 0x6e, 0x75, 0x50, 0x47, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x2a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x70, 0x67, 0x6b, 0x65,
	0x79, 0x73, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x61, 0x72, 0x67, 0x6f, 0x2d, 0x63,
	0x64, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x70, 0x67, 0x6b, 0x65, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_server_gpgkey_gpgkey_proto_rawDescOnce sync.Once
	file_server_gpgkey_gpgkey_proto_rawDescData = file_server_gpgkey_gpgkey_proto_rawDesc
)

func file_server_gpgkey_gpgkey_proto_rawDescGZIP() []byte {
	file_server_gpgkey_gpgkey_proto_rawDescOnce.Do(func() {
		file_server_gpgkey_gpgkey_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_gpgkey_gpgkey_proto_rawDescData)
	})
	return file_server_gpgkey_gpgkey_proto_rawDescData
}

var file_server_gpgkey_gpgkey_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_server_gpgkey_gpgkey_proto_goTypes = []any{
	(*GnuPGPublicKeyQuery)(nil),          // 0: gpgkey.GnuPGPublicKeyQuery
	(*GnuPGPublicKeyCreateRequest)(nil),  // 1: gpgkey.GnuPGPublicKeyCreateRequest
	(*GnuPGPublicKeyCreateResponse)(nil), // 2: gpgkey.GnuPGPublicKeyCreateResponse
	(*GnuPGPublicKeyResponse)(nil),       // 3: gpgkey.GnuPGPublicKeyResponse
	(*v1alpha1.GnuPGPublicKey)(nil),      // 4: github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKey
	(*v1alpha1.GnuPGPublicKeyList)(nil),  // 5: github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKeyList
}
var file_server_gpgkey_gpgkey_proto_depIdxs = []int32{
	4, // 0: gpgkey.GnuPGPublicKeyCreateRequest.publickey:type_name -> github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKey
	5, // 1: gpgkey.GnuPGPublicKeyCreateResponse.created:type_name -> github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKeyList
	0, // 2: gpgkey.GPGKeyService.List:input_type -> gpgkey.GnuPGPublicKeyQuery
	0, // 3: gpgkey.GPGKeyService.Get:input_type -> gpgkey.GnuPGPublicKeyQuery
	1, // 4: gpgkey.GPGKeyService.Create:input_type -> gpgkey.GnuPGPublicKeyCreateRequest
	0, // 5: gpgkey.GPGKeyService.Delete:input_type -> gpgkey.GnuPGPublicKeyQuery
	5, // 6: gpgkey.GPGKeyService.List:output_type -> github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKeyList
	4, // 7: gpgkey.GPGKeyService.Get:output_type -> github.com.argoproj.argo_cd.v2.pkg.apis.application.v1alpha1.GnuPGPublicKey
	2, // 8: gpgkey.GPGKeyService.Create:output_type -> gpgkey.GnuPGPublicKeyCreateResponse
	3, // 9: gpgkey.GPGKeyService.Delete:output_type -> gpgkey.GnuPGPublicKeyResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_server_gpgkey_gpgkey_proto_init() }
func file_server_gpgkey_gpgkey_proto_init() {
	if File_server_gpgkey_gpgkey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_gpgkey_gpgkey_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GnuPGPublicKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_gpgkey_gpgkey_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GnuPGPublicKeyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_gpgkey_gpgkey_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GnuPGPublicKeyCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_gpgkey_gpgkey_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GnuPGPublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_gpgkey_gpgkey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_gpgkey_gpgkey_proto_goTypes,
		DependencyIndexes: file_server_gpgkey_gpgkey_proto_depIdxs,
		MessageInfos:      file_server_gpgkey_gpgkey_proto_msgTypes,
	}.Build()
	File_server_gpgkey_gpgkey_proto = out.File
	file_server_gpgkey_gpgkey_proto_rawDesc = nil
	file_server_gpgkey_gpgkey_proto_goTypes = nil
	file_server_gpgkey_gpgkey_proto_depIdxs = nil
}
